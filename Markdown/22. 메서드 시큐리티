# 메서드 시큐리티

- `@EnableGlobalMethodSecurity`

```java
@EnableGlobalMethodSercurity(jsr250Enabled = true, prePostEnabled = true, securedEnabled = true)
```

- `@Secured 와 @RollsAllowed`
  - @Secured 는 스프링에서 제공하는것이고 @RollsAllowed 는 자바에서 지원하는 어노테이션이다. 기능은 같다.
  - 메서드 호출 이전에 권한을 확인한다.
  - 스프링 EL 을 사용하지 못한다.

- `@PreAuthorize 와 @PostAuthorize`
  - 메서드 호출 이전 이후에 권한을 확인할 수 있다.
  - 스프링 EL 을 사용하여 메서드 매개변수와 리턴값을 검증할 수도 있다.
  
## Example

- 메서드 시큐리티용 설정 파일 생성

```java
@Configuration
@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true, jsr250Enabled = true)
public class MethodSecurityConfig extends GlobalMethodSecurityConfiguration {

    @Override
    protected AccessDecisionManager accessDecisionManager() {
        RoleHierarchyImpl roleHierarchy = new RoleHierarchyImpl();
        roleHierarchy.setHierarchy("ROLE_ADMIN > ROLE_USER");
        AffirmativeBased accessDecisionManager = (AffirmativeBased) super.accessDecisionManager();
        accessDecisionManager.getDecisionVoters().add(new RoleHierarchyVoter(roleHierarchy));
        return accessDecisionManager;
    }
    
}
```

- 적용 샘플 코드

```java
@Service
public class SampleService {

    @Secured({"ROLE_USER", "ROLE_ADMIN"})
    public void dashboard() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        UserDetails userDetails = (UserDetails) authentication.getPrincipal();
        System.out.println("===============");
        System.out.println(authentication);
        System.out.println(userDetails.getUsername());
    }

    @Async
    public void asyncService() {
        SecurityLogger.log("Async Service");
        System.out.println("Async service is called.");
    }
}
```
